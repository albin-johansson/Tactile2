name: "CI: Ubuntu"

on: [ push ]

env:
  DISPLAY: :99.0
  SDL_VIDEODRIVER: x11
  VCPKG_ROOT: ${{github.workspace}}/vcpkg
  VCPKG_DEFAULT_BINARY_CACHE: ${{github.workspace}}/vcpkg/bincache
  VCPKG_CACHE_EDITION: 1

jobs:
  ubuntu-latest-test:
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, '[skip-ci]') == false
    steps:
      - uses: actions/checkout@v3
      - uses: lukka/get-cmake@latest

      - name: Install system dependencies
        shell: bash
        run: |
          sudo apt update
          sudo apt install libegl1-mesa-dev libgles2-mesa-dev libgl-dev
          sudo apt install libasound2-dev
          sudo apt install libpulse-dev
          sudo apt install libx11-dev libxmu-dev libxi-dev
          sudo apt install gcc-11 g++-11
          sudo apt install xvfb

      - name: Emulate video device
        shell: bash
        run: /sbin/start-stop-daemon --start --pidfile /tmp/custom_xvfb_99.pid --make-pidfile --background --exec /usr/bin/Xvfb -- :99 -screen 0 800x600x24 -ac +extension GLX;

      - name: Wait a bit for video device
        shell: bash
        run: sleep 3

      - name: Install Boost
        id: install-boost
        uses: MarkusJx/install-boost@v2.4.3
        with:
          boost_version: 1.80.0

      - name: Cache Vcpkg
        id: restore-vcpkg-and-artifacts
        uses: actions/cache@v3
        with:
          path: |
            ${{env.VCPKG_ROOT}}
            !${{env.VCPKG_ROOT}}\buildtrees
            !${{env.VCPKG_ROOT}}\packages
            !${{env.VCPKG_ROOT}}\downloads
            !${{env.VCPKG_ROOT}}\installed
          key: tactile-linux-vcpkg-${{hashFiles('vcpkg.json')}}-${{env.VCPKG_CACHE_EDITION}}

      - name: Install Vcpkg
        if: steps.restore-vcpkg-and-artifacts.outputs.cache-hit != 'true'
        shell: bash
        run: |
          git clone https://github.com/microsoft/vcpkg
          ./vcpkg/bootstrap-vcpkg.sh -disableMetrics
          sudo ./vcpkg/vcpkg integrate install

      - name: Create directory ${{env.VCPKG_DEFAULT_BINARY_CACHE}}
        if: steps.restore-vcpkg-and-artifacts.outputs.cache-hit != 'true'
        shell: bash
        run: mkdir -p ${{env.VCPKG_DEFAULT_BINARY_CACHE}}

      - name: Create build directory
        shell: bash
        run: mkdir -p build

      - name: Generate build files
        working-directory: ./build
        shell: bash
        run: cmake .. -DCMAKE_BUILD_TYPE=Debug -GNinja
        env:
          CC: gcc-11
          CXX: g++-11
          BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}

      - name: Build
        working-directory: ./build
        shell: bash
        env:
          CC: gcc-11
          CXX: g++-11
        run: ninja

      - name: Run tests
        working-directory: ./build/test
        shell: bash
        run: ./TactileTests